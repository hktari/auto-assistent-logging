-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.account
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    email character varying(250) NOT NULL,
    password character varying(250) NOT NULL,
    "automationEnabled" boolean NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT email UNIQUE (email)
);

COMMENT ON TABLE public.account
    IS 'a user has access to the automate asisstant logging app';

CREATE TABLE IF NOT EXISTS public.login_info
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    account_id bigint NOT NULL,
    username character varying(250) NOT NULL,
    password_cipher bytea NOT NULL,
    iv_cipher bytea NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT username UNIQUE (username)
);

COMMENT ON TABLE public.login_info
    IS 'a user has login information. Login info contains credentials to login to the assisant web app';

CREATE TABLE IF NOT EXISTS public.work_week_config
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    login_info_id bigint NOT NULL,
    day character varying(250) NOT NULL,
    start_at character varying(250),
    end_at character varying(250),
    PRIMARY KEY (id),
    CONSTRAINT "UNIQUE_USER_DAY" UNIQUE (login_info_id, day)
);

CREATE TABLE IF NOT EXISTS public.log_entry
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    login_info_id bigint NOT NULL,
    status character varying(250) NOT NULL,
    "timestamp" timestamp without time zone NOT NULL,
    error character varying,
    message character varying,
    action character varying,
    config_type character varying(50) NOT NULL
);

COMMENT ON TABLE public.log_entry
    IS 'A log entry contains data of an executed action. When for which user and which action was automated.';

CREATE TABLE IF NOT EXISTS public.daily_config
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    login_info_id bigint NOT NULL,
    date date NOT NULL,
    start_at character varying,
    end_at character varying,
    PRIMARY KEY (id),
    CONSTRAINT date_login_info UNIQUE (login_info_id, date)
);

COMMENT ON TABLE public.daily_config
    IS 'configurations for logging. On a per day basis';

CREATE TABLE IF NOT EXISTS public.work_week_exception
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    work_week_config_id bigint NOT NULL,
    date date NOT NULL,
    action character varying(250) NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT "action and date and id" UNIQUE (work_week_config_id, date, action)
);

COMMENT ON TABLE public.work_week_exception
    IS 'ignore work_week_config entry for given date';

COMMENT ON CONSTRAINT "action and date and id" ON public.work_week_exception
    IS 'prevent duplicates for given work week config which have the same date and action';

ALTER TABLE IF EXISTS public.login_info
    ADD CONSTRAINT "ACCOUNT" FOREIGN KEY (account_id)
    REFERENCES public.account (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.work_week_config
    ADD CONSTRAINT login_info FOREIGN KEY (login_info_id)
    REFERENCES public.login_info (id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.log_entry
    ADD CONSTRAINT login_info FOREIGN KEY (login_info_id)
    REFERENCES public.login_info (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.daily_config
    ADD CONSTRAINT login_info FOREIGN KEY (login_info_id)
    REFERENCES public.login_info (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.work_week_exception
    ADD CONSTRAINT work_week_config FOREIGN KEY (work_week_config_id)
    REFERENCES public.work_week_config (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;

END;