version: '3'

services:
  webserver:
    build: ./nginx/
    image: hktari/assistant-logging_webserver
    ports:
      - 80:80
      - 443:443
    restart: always
    volumes:
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    environment:
      - API_HOST=webapp-backend
      - API_PORT=${BACKEND_PORT}
      - DOMAIN=${DOMAIN}
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw

  webapp-backend:
    build: ./webapp/backend
    image: hktari/auto-assistant-logging-backend
    extra_hosts:
      - host.docker.internal:host-gateway
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${BACKEND_PORT}
      - PGHOST=${PGHOST}
      - PGUSER=${PGUSER}
      - PGDATABASE=${PGDATABASE}
      - PGPASSWORD=${PGPASSWORD}
      - PGPORT=${PGPORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN_HRS=${JWT_EXPIRES_IN_HRS}
      - CRYPTO_KEY=${CRYPTO_KEY}

  browser-automation:
    build: ./browser-automation/
    image: hktari/assistant-logging_browser-automation
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      - NODE_ENV=${NODE_ENV}
      - PGHOST=${PGHOST}
      - PGUSER=${PGUSER}
      - PGDATABASE=${PGDATABASE}
      - PGPASSWORD=${PGPASSWORD}
      - PGPORT=${PGPORT}
      - CRYPTO_KEY=${CRYPTO_KEY}
      - MDDSZ_WEBAPP_ENDPOINT=${MDDSZ_WEBAPP_ENDPOINT}
      - TIME_TO_EXEC_THRESHOLD_MIN=${TIME_TO_EXEC_THRESHOLD_MIN}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - CLOUDWATCH_LOG_GROUP=${CLOUDWATCH_LOG_GROUP}
      - CLOUDWATCH_REGION=${CLOUDWATCH_REGION}
      - LOG_LEVEL=${LOG_LEVEL}
    volumes:
      - ./screenshots/:/var/screenshots/:rw
    cap_add:
      - SYS_ADMIN



